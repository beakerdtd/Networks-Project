class Agent {                   //don't worry about this, java's really cool
																//and uses classes for everything, 
															  //very close to von neumann set theory

	String philosophy;            //initial variables
	char party;


	public Agent(String phi, char orientation){   

		philosophy = phi;										//assign philosophy vector, here a string to make it easy on me
		party = orientation;								//assign whether or not agent is of a positive or antipositive mind

	}

	public static double K(String phi1, String phi2) {
		int count = 0;
		if (phi1.length() == phi2.length()){						//if vectors same length, check for similarity
			for(int i = 0; i<phi1.length(); i++){
				if(phi1.charAt(i) == phi2.charAt(i)){				//order DOES matter
					count++;
				}
			}
			return (double) count/phi1.length();          //return value indicating how closely they are related, 
																										//prefix included due to java fuckery

		}
		else {
			for (int i = 0; i<Math.min(phi1.length(), phi2.length()); i++){	//else, check for similarity of shorter vector to longer vector
				if(phi1.charAt(i) == phi2.charAt(i)){
					count++;
				}
			}
			return (double) count/Math.max(phi1.length(), phi2.length());	//even if shorter vector contained in longer vector,
		}																																//return value is measured against larger philosophy

	}

	public static String comparison(String phi1, String phi2){

		String new_string = "";
		//String new_string = CharBuffer.allocate( spaces ).toString().replace( '\0', ' ' );
		//String new_string = new String(new char[Math.max(phi1.length(), phi2.length())]).replace('\0', '2');
		for(int i = 0; i<Math.min(phi1.length(), phi2.length()); i++){
			if(phi1.charAt(i) == phi2.charAt(i)){
				new_string = new_string+'1';
			}
			else {
				new_string = new_string+'0';
			}
		}
		//return new_string.charAt(2);
		return new_string;
	}

	public static String test_hypothesis(String phi, String tau){
		if((int) K(phi, tau) == 1){
			return "Agent's philosophy has achieved realization!";
		}
		else{
			return "Agent has encountered a contraction.";
		}
	}

	public static String adapt(String phi1, String phi2, char orientation){
		double result;

		if(orientation == '-'){
			//result = K(phi1, phi2);
			//for
			result = Math.random();


		}

		return comparison(phi1, phi2);
	}


	public static void main(String[] args){														//java's form of main

		String truth = "1111";				//truth vector for later use


		Agent John = new Agent("1111", '+');														//generation of agent classes
		Agent Jane = new Agent("1001", '-');

		System.out.println(John.philosophy);														//test stuff for me
		System.out.println(Jane.philosophy);														//test stuff for me
		System.out.println(John.party);
		System.out.println(John.philosophy==Jane.philosophy);						//test stuff for me
		System.out.println(K(John.philosophy, Jane.philosophy));				//value generated by K, going to be probability of change
		System.out.println(test_hypothesis(John.philosophy, truth));
		System.out.println(Math.random());
		System.out.println(adapt(John.philosophy, Jane.philosophy, '+'));


	}
}